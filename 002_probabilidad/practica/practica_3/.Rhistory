_HiStOrY_V2_
funcion_mejora = function(i)
{ muestra=rnorm(10000,0,2)
if (mean(muestra)>0) {
print(c("en la muestra",i, "el promedio dio mayor a cero")) }
if (mean(muestra)<=(-0.5)) {
print(c("en la muestra",i, "el promedio dio menor a cero"))}
}
apply(as.matrix(seq(1:30)),1,funcion_mejora)
if(ncaracteres==8 && letras[2]=="u"){
print("prefiero la presencialidad")}
ncaracteres =8
letras = c("pulpo")
if(ncaracteres==8 && letras[2]=="u"){
print("prefiero la presencialidad")}
letras[2]
ncaracteres =8
letras = c("p","u","l","p","o")
if(ncaracteres==8 && letras[2]=="u"){
print("prefiero la presencialidad")}
if(ncaracteres==8)
{if(letras[2]=="u")
{print("Prefiero la presencialidad")}
}
if(ncaracteres==8 || letras[2]=="u"){
print("prefiero la presencialidad")}
if(ncaracteres==8) || letras[2]=="u"){
if(ncaracteres==8) || (letras[2]=="u"){
if(ncaracteres==8 || letras[2]=="u"){
print("prefiero la presencialidad")}
xor((ncaracteres==8) ,(letras[2]=="u"))
ncaracteres = 8
letras = c("p","u","l","p","o")
if(xor((ncaracteres==8) ,(letras[2]=="u"))){
print("prefiero la presencialidad")}
ncaracteres = 7
letras = c("p","u","l","p","o")
if(xor((ncaracteres==8) ,(letras[2]=="u"))){
print("prefiero la presencialidad")}
(-1)^0/factorial(0))+((-1)^1
((-1)^0/factorial(0))+((-1)^1
((-1)^1/factorial(1))
((-1)^1/factorial(1))
((-1)^1/factorial(1))
(-1)^1/factorial(1))
(-1)^1/factorial(1)
(-1)^0/factorial(0)
# Nota: El subfactorial de 1 es 0
derangement = factorial(9)*(((-1)^0/factorial(0))+(0)+((-1)^2/factorial(2))+((-1)^3/factorial(3))+((-1)^4/factorial(4))+((-1)^5/factorial(5))+((-1)^6/factorial(6))+((-1)^7/factorial(7))+((-1)^8/factorial(8))+((-1)^9/factorial(9)))
probabilidad = (derangement/factorial(9))
probabilidad
derangement = factorial(9)*(((-1)^0/factorial(0))+((-1)^1/factorial(1))+((-1)^2/factorial(2))+((-1)^3/factorial(3))+((-1)^4/factorial(4))+((-1)^5/factorial(5))+((-1)^6/factorial(6))+((-1)^7/factorial(7))+((-1)^8/factorial(8))+((-1)^9/factorial(9)))
probabilidad = (derangement/factorial(9))
probabilidad
data.frame(d,e) %>% cbind(d,e)
%>%
library(dplyr)
data.frame(d,e) %>% cbind(d,e)
library(dplyr)
data.frame(d,e) %>% cbind(d,e)
d<-factor(c(1:3))
e<-seq(1:3)
data.frame(d,e) %>% cbind(d,e)
data.frame(d,e) %>%
cbind(d,e)
(df2<-cbind.data.frame(d,e))
str(df2)
(df2<-cbind.data.frame(d,e))
data.frame(d,e) %>%
cbind(d,e)
cbind(d,e) %>% data.frame(d,e)
cbind(d,e)
cbind(d,e) %>% data.frame()
(df3<-cbind(d,e) %>%
data.frame())
str(df3)
<- #option + -
x1 = 0:10
0:10
10:0
seq(30:0:-3)
# 0:10
# 10:0
seq(30:0:-3)
# 0:10
# 10:0
seq(30:0:-3)
# 0:10
# 10:0
seq(30:0:-3)
# 0:10
# 10:0
seq(30:0:-3)
# 0:10
# 10:0
seq(30,0,-3)
# 0:10
# 10:0
seq(30,0,3)
# 0:10
# 10:0
seq(30,0,-3)
rm(list = ls())
library(rio)
derangement = factorial(9)*(((-1)^0/factorial(0))+((-1)^1/factorial(1))+((-1)^2/factorial(2))+((-1)^3/factorial(3))+((-1)^4/factorial(4))+((-1)^5/factorial(5))+((-1)^6/factorial(6))+((-1)^7/factorial(7))+((-1)^8/factorial(8))+((-1)^9/factorial(9)))
probabilidad = (derangement/factorial(9))
probabilidad
#Importamos la libreria arules
install.packages("arules")
library(arules)
data <- read.csv(file = "datos_groceries.csv")
(str(data))
(data)
# Vamos a importar la libreria dplyr
library(dplyr)
data_df<-data.frame(data)
(n_distinct(data_df$id_compra))# La funcion n_distinct me devuelve la cantidad de valores distintos de una columna
n_distinct(data_df$item)
# Soporte(S->T) = P(S^T) >= Support_value
# Donde S, es el conjunto de objetos que ya se tienen en el carrito
# y T es el producto que quiero que agregue el comprador.
# P(S^T)= # tickets que tienen los productos S / # tickets total
# El soporte de cada item, seria la probabilidad de llevar "ese" item
support_df<-data.frame(table(data_df$item)/n_distinct(data_df$id_compra))
colnames(support_df)<-c("Product","Support")
(support_df<-support_df[order(support_df$Support, decreasing = TRUE),])
# P(whole milk ^ yogurt)
quantity_milk_yogurt=length(intersect(data_df$id_compra[data_df$item=='whole milk'],data_df$id_compra[data$item=="yogurt"]))
(support_milk_yogurt = quantity_milk_yogurt/n_distinct(data_df$id_compra))
transacciones = read.transactions(file = "datos_groceries.csv", format = "single", sep = ",",header = TRUE, cols = c("id_compra",  "item"), rm.duplicates = TRUE)
soporte = 0.001
confianza = 0.7
reglas=apriori(data = transacciones, parameter = list(support = soporte, confidence = confianza)) #, minlen = 3, maxlen = 5
inspect(reglas)
data_df
#Importamos la libreria arules
install.packages("arules")
library(arules)
data <- read.csv(file = "datos_groceries.csv")
(str(data))
(data)
# Vamos a importar la libreria dplyr
library(dplyr)
data_df<-data.frame(data)
(n_distinct(data_df$id_compra))# La funcion n_distinct me devuelve la cantidad de valores distintos de una columna
n_distinct(data_df$item)
# Soporte(S->T) = P(S^T) >= Support_value
# Donde S, es el conjunto de objetos que ya se tienen en el carrito
# y T es el producto que quiero que agregue el comprador.
# P(S^T)= # tickets que tienen los productos S / # tickets total
# El soporte de cada item, seria la probabilidad de llevar "ese" item
support_df<-data.frame(table(data_df$item)/n_distinct(data_df$id_compra))
colnames(support_df)<-c("Product","Support")
(support_df<-support_df[order(support_df$Support, decreasing = TRUE),])
# P(whole milk ^ yogurt)
quantity_milk_yogurt=length(intersect(data_df$id_compra[data_df$item=='whole milk'],data_df$id_compra[data$item=="yogurt"]))
(support_milk_yogurt = quantity_milk_yogurt/n_distinct(data_df$id_compra))
transacciones = read.transactions(file = "datos_groceries.csv", format = "single", sep = ",",header = TRUE, cols = c("id_compra",  "item"), rm.duplicates = TRUE)
soporte = 0.00001
confianza = 0.7
reglas=apriori(data = transacciones, parameter = list(support = soporte, confidence = confianza)) #, minlen = 3, maxlen = 5
