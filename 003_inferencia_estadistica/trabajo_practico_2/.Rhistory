set.seed(123)
estimador_momentos <- function(muestra) {
n = length(muestra)
segundo_momento = (1/n) * sum(muestra ^ 2)
b = sqrt((segundo_momento - (mean(muestra, na.rm = T) ^ 2)) / 2)
return(c(mean(muestra, na.rm = T), b))
}
m.log.likelihood <- function(muestra, par) {
mu = par[1]
b = par[2]
n = length(muestra)
- (n * log(1 / (2 * b)) - ((1/b) * sum(abs(muestra - mu))))
}
# m.log.likelihood(muestra$x, estimador_momentos(muestra$x))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = estimador_momentos(muestra),
fn = m.log.likelihood,
muestra = muestra) $par
}
muestra <- read.csv("~/Desktop/UDESA/003_inferencia_estadistica/trabajo_practico_2/laplace.csv", sep="")
# head(muestra)
print(paste("La estimacion por el metodo de momentos, arroja un mu =",
round(estimador_momentos(muestra$x)[1], 3), "y b =",
round(estimador_momentos(muestra$x)[2], 3), sep = " "))
print(paste("La estimacion por el metodo de maxima verosimilitud, arroja un mu =",
round(EMV(muestra$x)[1], 3), "y b =", round(EMV(muestra$x)[2], 3),
sep = " "))
(CV_MV <- sqrt(2 * (EMV(muestra$x)[2]) ^ 2) / EMV(muestra$x)[1])
# USANDO MV PARA CALCULAR EL INTERVALO
estimador_desvio <- sd(muestra$x)
lim_inferior <- mean(muestra$x) - 1.96 * estimador_desvio/sqrt(length(muestra$x))
lim_superior <- mean(muestra$x) + 1.96 * estimador_desvio/sqrt(length(muestra$x))
print(paste("Utilizando un nivel de confianza del 95%, nos queda un intervalo de confianza para la media {",round(lim_inferior, 3), round(lim_superior, 3),"}", sep = " "))
library(VGAM)
b_mv  <- EMV(muestra$x)[2]
mu_mv <- EMV(muestra$x)[1]
# Armo 2000 muestras parametricas boot, a partir de los parametros estimados
# con maxima verosimilitud y mi funcion de distribucion conocida.
# Luego, estimo de cada muestra, el valor de mu, a partir de MV.
vector_mu_boot_parametrico <- replicate(2000, EMV(rlaplace(n = 30,
location = mu_mv,
scale = b_mv))[1])
# Ahora, calculo los parametros de mi estimador
# Estimo el mu
estimador_mu_boot_param <- mean(vector_mu_boot_parametrico)
# Estimo el desvio del estimador
estimador_desvio_boot_param <- sd(vector_mu_boot_parametrico)
lim_inferior_boot_param <- (EMV(muestra$x)[1] - 1.96 * estimador_desvio_boot_param)
lim_superior_boot_param <- (EMV(muestra$x)[1] + 1.96 * estimador_desvio_boot_param)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP PARAMETRICO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_param, 3), round(lim_superior_boot_param, 3),"}", sep = " "))
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(5000, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = F)
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(10000, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = F)
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(10, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = F)
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(10, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = T)
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(1000, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = T)
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(10000, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = T)
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(100000, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
hist(vector_mu_boot_resamp, freq = T)
set.seed(123)
estimador_momentos <- function(muestra) {
n = length(muestra)
segundo_momento = (1/n) * sum(muestra ^ 2)
b = sqrt((segundo_momento - (mean(muestra, na.rm = T) ^ 2)) / 2)
return(c(mean(muestra, na.rm = T), b))
}
m.log.likelihood <- function(muestra, par) {
mu = par[1]
b = par[2]
n = length(muestra)
- (n * log(1 / (2 * b)) - ((1/b) * sum(abs(muestra - mu))))
}
# m.log.likelihood(muestra$x, estimador_momentos(muestra$x))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = estimador_momentos(muestra),
fn = m.log.likelihood,
muestra = muestra) $par
}
muestra <- read.csv("~/Desktop/UDESA/003_inferencia_estadistica/trabajo_practico_2/laplace.csv", sep="")
# head(muestra)
print(paste("La estimacion por el metodo de momentos, arroja un mu =",
round(estimador_momentos(muestra$x)[1], 3), "y b =",
round(estimador_momentos(muestra$x)[2], 3), sep = " "))
print(paste("La estimacion por el metodo de maxima verosimilitud, arroja un mu =",
round(EMV(muestra$x)[1], 3), "y b =", round(EMV(muestra$x)[2], 3),
sep = " "))
(CV_MV <- sqrt(2 * (EMV(muestra$x)[2]) ^ 2) / EMV(muestra$x)[1])
# USANDO MV PARA CALCULAR EL INTERVALO
estimador_desvio <- sd(muestra$x)
lim_inferior <- mean(muestra$x) - 1.96 * estimador_desvio/sqrt(length(muestra$x))
lim_superior <- mean(muestra$x) + 1.96 * estimador_desvio/sqrt(length(muestra$x))
print(paste("Utilizando un nivel de confianza del 95%, nos queda un intervalo de confianza para la media {",round(lim_inferior, 3), round(lim_superior, 3),"}", sep = " "))
library(VGAM)
b_mv  <- EMV(muestra$x)[2]
mu_mv <- EMV(muestra$x)[1]
# Armo 2000 muestras parametricas boot, a partir de los parametros estimados
# con maxima verosimilitud y mi funcion de distribucion conocida.
# Luego, estimo de cada muestra, el valor de mu, a partir de MV.
vector_mu_boot_parametrico <- replicate(2000, EMV(rlaplace(n = 30,
location = mu_mv,
scale = b_mv))[1])
# Ahora, calculo los parametros de mi estimador
# Estimo el mu
estimador_mu_boot_param <- mean(vector_mu_boot_parametrico)
# Estimo el desvio del estimador
estimador_desvio_boot_param <- sd(vector_mu_boot_parametrico)
lim_inferior_boot_param <- (EMV(muestra$x)[1] - 1.96 * estimador_desvio_boot_param)
lim_superior_boot_param <- (EMV(muestra$x)[1] + 1.96 * estimador_desvio_boot_param)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP PARAMETRICO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_param, 3), round(lim_superior_boot_param, 3),"}", sep = " "))
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(5000, EMV(sample(x = muestra$x,
size = 30,
replace = T))[1])
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(5000, EMV(sample(x = muestra$x,
size = 300,
replace = T))[1])
hist(vector_mu_boot_resamp)
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
# Creo mis muestras boot, a partir de la muestra original y un sampleo con
# reposicion, luego calculo a partir de mi estimador de MV, el valor de mu_boot
# por resampleo
vector_mu_boot_resamp <- replicate(5000, EMV(sample(x = muestra$x,
size = 3000,
replace = T))[1])
hist(vector_mu_boot_resamp)
lim_inferior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.025)
lim_superior_boot_resamp <- quantile(x = vector_mu_boot_resamp, probs = 0.975)
print(paste("Utilizando un nivel de confianza del 95%, y el metodo de BOOTSTRAP POR RESAMPLEO, nos queda un intervalo de confianza para la media {",round(lim_inferior_boot_resamp, 3), round(lim_superior_boot_resamp, 3),"}", sep = " "))
