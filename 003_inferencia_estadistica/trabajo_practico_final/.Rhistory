ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:n_observaciones) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within<- sum(aux)
S_between <- n_observaciones*sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
(S_tot <- S_within + S_between)
(S_total <- sum((muestra - mean(muestra)) ^ 2))
round(S_tot, 4) == round(S_total, 4)
# Creamos una funcion que calcula el Fcritico y el Fobservado, y devuelve
# True, en caso de rechazar H0 o False en caso de no tener evidencia suficiente
# para rechazarla.
rechazaHO <- function (muestra) {
F_critico <- qf(p = 0.9,
df1 = ncol(muestra) - 1,
df2 = 3 * (nrow(muestra) - 1))
S_between <- n_observaciones*
sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
aux <- matrix(data = rep(0, 60),
nrow = nrow(muestra),
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:nrow(muestra)) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within <- sum(aux)
F_observado <- (S_between * ncol(muestra) * (nrow(muestra) - 1)) /
((ncol(muestra) - 1) * S_within)
return(F_observado >= F_critico)
}
(proporcion_rechazos_h0 <- mean(replicate(10000,
rechazaHO(escenario1(mus = c(0, 0, 0),
J = 20)))))
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
## experimentaci贸n anova
escenario1 = function(mus, J){
desvio1 = sqrt(3)
desvio2 = sqrt(3)
desvio3 = sqrt(3)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1), # El comando cbind junta columnas
mus[2] + rnorm(J, 0, desvio2),
mus[3] + rnorm(J, 0, desvio3))
}
escenario5 = function(mus, dep){
J = 20
desvio1 = 1
desvio2 = 1
desvio3 = 1
base_err = rnorm(J, 0, sd = 1)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1*sqrt(1-dep)) + base_err*sqrt(dep),
mus[2] + rnorm(J, 0, desvio2*sqrt(1-dep)) + base_err*sqrt(dep),
mus[3] + rnorm(J, 0, desvio3*sqrt(1-dep)) + base_err*sqrt(dep))
}
SStot = function(muestra){
sum((muestra - mean(muestra))^2)
}
SSw = function(muestra){
#SStot(muestra[,1]) + SStot(muestra[,2]) + ... + SStot(muestra[,I])
sum(apply(muestra, 2, SStot))
}
SSb = function(muestra){
J = nrow(muestra)
media_tot = mean(muestra)
J*(sum((colMeans(muestra) - media_tot)^2 ))
}
(muestra = escenario1(mus = c(0, 0, 0), J = 20))
n_observaciones <- 20
aux <- matrix(data = rep(0, 60),
nrow = n_observaciones,
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:n_observaciones) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within<- sum(aux)
S_between <- n_observaciones*sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
(S_tot <- S_within + S_between)
(S_total <- sum((muestra - mean(muestra)) ^ 2))
round(S_tot, 4) == round(S_total, 4)
# Creamos una funcion que calcula el Fcritico y el Fobservado, y devuelve
# True, en caso de rechazar H0 o False en caso de no tener evidencia suficiente
# para rechazarla.
rechazaHO <- function (muestra) {
F_critico <- qf(p = 0.9,
df1 = ncol(muestra) - 1,
df2 = 3 * (nrow(muestra) - 1))
S_between <- n_observaciones*
sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
aux <- matrix(data = rep(0, 60),
nrow = nrow(muestra),
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:nrow(muestra)) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within <- sum(aux)
F_observado <- (S_between * ncol(muestra) * (nrow(muestra) - 1)) /
((ncol(muestra) - 1) * S_within)
return(F_observado >= F_critico)
}
(proporcion_rechazos_h0 <- mean(replicate(10000,
rechazaHO(escenario1(mus = c(0, 0, 0),
J = 20)))))
knitr::opts_chunk$set(echo = TRUE)
set.seed(1203)
## experimentaci贸n anova
escenario1 = function(mus, J){
desvio1 = sqrt(3)
desvio2 = sqrt(3)
desvio3 = sqrt(3)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1), # El comando cbind junta columnas
mus[2] + rnorm(J, 0, desvio2),
mus[3] + rnorm(J, 0, desvio3))
}
escenario5 = function(mus, dep){
J = 20
desvio1 = 1
desvio2 = 1
desvio3 = 1
base_err = rnorm(J, 0, sd = 1)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1*sqrt(1-dep)) + base_err*sqrt(dep),
mus[2] + rnorm(J, 0, desvio2*sqrt(1-dep)) + base_err*sqrt(dep),
mus[3] + rnorm(J, 0, desvio3*sqrt(1-dep)) + base_err*sqrt(dep))
}
SStot = function(muestra){
sum((muestra - mean(muestra))^2)
}
SSw = function(muestra){
#SStot(muestra[,1]) + SStot(muestra[,2]) + ... + SStot(muestra[,I])
sum(apply(muestra, 2, SStot))
}
SSb = function(muestra){
J = nrow(muestra)
media_tot = mean(muestra)
J*(sum((colMeans(muestra) - media_tot)^2 ))
}
(muestra = escenario1(mus = c(0, 0, 0), J = 20))
n_observaciones <- 20
aux <- matrix(data = rep(0, 60),
nrow = n_observaciones,
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:n_observaciones) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within<- sum(aux)
S_between <- n_observaciones*sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
(S_tot <- S_within + S_between)
(S_total <- sum((muestra - mean(muestra)) ^ 2))
round(S_tot, 4) == round(S_total, 4)
# Creamos una funcion que calcula el Fcritico y el Fobservado, y devuelve
# True, en caso de rechazar H0 o False en caso de no tener evidencia suficiente
# para rechazarla.
rechazaHO <- function (muestra) {
F_critico <- qf(p = 0.9,
df1 = ncol(muestra) - 1,
df2 = 3 * (nrow(muestra) - 1))
S_between <- n_observaciones*
sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
aux <- matrix(data = rep(0, 60),
nrow = nrow(muestra),
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:nrow(muestra)) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within <- sum(aux)
F_observado <- (S_between * ncol(muestra) * (nrow(muestra) - 1)) /
((ncol(muestra) - 1) * S_within)
return(F_observado >= F_critico)
}
(proporcion_rechazos_h0 <- mean(replicate(10000,
rechazaHO(escenario1(mus = c(0, 0, 0),
J = 20)))))
escenario2 <- function (medias, J) {
grupos = cbind(medias[1] + runif(n = J, min = -3, max = 3),
medias[2] + runif(n = J, min = -3, max = 3),
medias[3] + runif(n = J, min = -3, max = 3))
}
escenario2
escenario2(c(0,0,0), 20)
escenario2(c(0,0,0), 20)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1203)
## experimentaci贸n anova
escenario1 = function(mus, J){
desvio1 = sqrt(3)
desvio2 = sqrt(3)
desvio3 = sqrt(3)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1), # El comando cbind junta columnas
mus[2] + rnorm(J, 0, desvio2),
mus[3] + rnorm(J, 0, desvio3))
}
escenario5 = function(mus, dep){
J = 20
desvio1 = 1
desvio2 = 1
desvio3 = 1
base_err = rnorm(J, 0, sd = 1)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1*sqrt(1-dep)) + base_err*sqrt(dep),
mus[2] + rnorm(J, 0, desvio2*sqrt(1-dep)) + base_err*sqrt(dep),
mus[3] + rnorm(J, 0, desvio3*sqrt(1-dep)) + base_err*sqrt(dep))
}
SStot = function(muestra){
sum((muestra - mean(muestra))^2)
}
SSw = function(muestra){
#SStot(muestra[,1]) + SStot(muestra[,2]) + ... + SStot(muestra[,I])
sum(apply(muestra, 2, SStot))
}
SSb = function(muestra){
J = nrow(muestra)
media_tot = mean(muestra)
J*(sum((colMeans(muestra) - media_tot)^2 ))
}
(muestra = escenario1(mus = c(0, 0, 0), J = 20))
n_observaciones <- 20
aux <- matrix(data = rep(0, 60),
nrow = n_observaciones,
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:n_observaciones) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within<- sum(aux)
S_between <- n_observaciones*sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
(S_tot <- S_within + S_between)
(S_total <- sum((muestra - mean(muestra)) ^ 2))
round(S_tot, 4) == round(S_total, 4)
# Creamos una funcion que calcula el Fcritico y el Fobservado, y devuelve
# True, en caso de rechazar H0 o False en caso de no tener evidencia suficiente
# para rechazarla.
rechazaHO <- function (muestra) {
F_critico <- qf(p = 0.9,
df1 = ncol(muestra) - 1,
df2 = 3 * (nrow(muestra) - 1))
S_between <- n_observaciones*
sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
aux <- matrix(data = rep(0, 60),
nrow = nrow(muestra),
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:nrow(muestra)) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within <- sum(aux)
F_observado <- (S_between * ncol(muestra) * (nrow(muestra) - 1)) /
((ncol(muestra) - 1) * S_within)
return(F_observado >= F_critico)
}
(proporcion_rechazos_h0 <- mean(replicate(10000,
rechazaHO(escenario1(mus = c(0, 0, 0),
J = 20)))))
escenario2 <- function (medias, J) {
grupos = cbind(medias[1] + runif(n = J, min = -3, max = 3),
medias[2] + runif(n = J, min = -3, max = 3),
medias[3] + runif(n = J, min = -3, max = 3))
return(grupos)
}
escenario2(c(0,0,0), 20)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1203)
## experimentaci贸n anova
escenario1 = function(mus, J){
desvio1 = sqrt(3)
desvio2 = sqrt(3)
desvio3 = sqrt(3)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1), # El comando cbind junta columnas
mus[2] + rnorm(J, 0, desvio2),
mus[3] + rnorm(J, 0, desvio3))
}
escenario5 = function(mus, dep){
J = 20
desvio1 = 1
desvio2 = 1
desvio3 = 1
base_err = rnorm(J, 0, sd = 1)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1*sqrt(1-dep)) + base_err*sqrt(dep),
mus[2] + rnorm(J, 0, desvio2*sqrt(1-dep)) + base_err*sqrt(dep),
mus[3] + rnorm(J, 0, desvio3*sqrt(1-dep)) + base_err*sqrt(dep))
}
SStot = function(muestra){
sum((muestra - mean(muestra))^2)
}
SSw = function(muestra){
#SStot(muestra[,1]) + SStot(muestra[,2]) + ... + SStot(muestra[,I])
sum(apply(muestra, 2, SStot))
}
SSb = function(muestra){
J = nrow(muestra)
media_tot = mean(muestra)
J*(sum((colMeans(muestra) - media_tot)^2 ))
}
(muestra = escenario1(mus = c(0, 0, 0), J = 20))
n_observaciones <- 20
aux <- matrix(data = rep(0, 60),
nrow = n_observaciones,
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:n_observaciones) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within<- sum(aux)
S_between <- n_observaciones*sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
(S_tot <- S_within + S_between)
(S_total <- sum((muestra - mean(muestra)) ^ 2))
round(S_tot, 4) == round(S_total, 4)
# Creamos una funcion que calcula el Fcritico y el Fobservado, y devuelve
# True, en caso de rechazar H0 o False en caso de no tener evidencia suficiente
# para rechazarla.
rechazaHO <- function (muestra) {
F_critico <- qf(p = 0.9,
df1 = ncol(muestra) - 1,
df2 = 3 * (nrow(muestra) - 1))
S_between <- n_observaciones*
sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
aux <- matrix(data = rep(0, 60),
nrow = nrow(muestra),
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:nrow(muestra)) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within <- sum(aux)
F_observado <- (S_between * ncol(muestra) * (nrow(muestra) - 1)) /
((ncol(muestra) - 1) * S_within)
return(F_observado >= F_critico)
}
(proporcion_rechazos_h0 <- mean(replicate(10000,
rechazaHO(escenario1(mus = c(0, 0, 0),
J = 20)))))
escenario2 <- function (medias, J) {
grupos = cbind(medias[1] + runif(n = J, min = -3, max = 3),
medias[2] + runif(n = J, min = -3, max = 3),
medias[3] + runif(n = J, min = -3, max = 3))
return(grupos)
}
escenario3 <- function (medias, J) {
grupos = cbind(medias[1] + rt(n = J, df = 3),
medias[2] + rt(n = J, df = 3),
medias[3] + rt(n = J, df = 3))
return(grupos)
}
proporcion_rechazos_h0_error_normal <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario1(mus = medias,
J = J)))))
}
knitr::opts_chunk$set(echo = TRUE)
set.seed(1203)
## experimentaci贸n anova
escenario1 = function(mus, J){
desvio1 = sqrt(3)
desvio2 = sqrt(3)
desvio3 = sqrt(3)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1), # El comando cbind junta columnas
mus[2] + rnorm(J, 0, desvio2),
mus[3] + rnorm(J, 0, desvio3))
}
escenario5 = function(mus, dep){
J = 20
desvio1 = 1
desvio2 = 1
desvio3 = 1
base_err = rnorm(J, 0, sd = 1)
grupos = cbind(mus[1] + rnorm(J, 0, desvio1*sqrt(1-dep)) + base_err*sqrt(dep),
mus[2] + rnorm(J, 0, desvio2*sqrt(1-dep)) + base_err*sqrt(dep),
mus[3] + rnorm(J, 0, desvio3*sqrt(1-dep)) + base_err*sqrt(dep))
}
SStot = function(muestra){
sum((muestra - mean(muestra))^2)
}
SSw = function(muestra){
#SStot(muestra[,1]) + SStot(muestra[,2]) + ... + SStot(muestra[,I])
sum(apply(muestra, 2, SStot))
}
SSb = function(muestra){
J = nrow(muestra)
media_tot = mean(muestra)
J*(sum((colMeans(muestra) - media_tot)^2 ))
}
(muestra = escenario1(mus = c(0, 0, 0), J = 20))
n_observaciones <- 20
aux <- matrix(data = rep(0, 60),
nrow = n_observaciones,
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:n_observaciones) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within<- sum(aux)
S_between <- n_observaciones*sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
(S_tot <- S_within + S_between)
(S_total <- sum((muestra - mean(muestra)) ^ 2))
round(S_tot, 4) == round(S_total, 4)
# Creamos una funcion que calcula el Fcritico y el Fobservado, y devuelve
# True, en caso de rechazar H0 o False en caso de no tener evidencia suficiente
# para rechazarla.
rechazaHO <- function (muestra) {
F_critico <- qf(p = 0.9,
df1 = ncol(muestra) - 1,
df2 = 3 * (nrow(muestra) - 1))
S_between <- n_observaciones*
sum(sum((mean(muestra[ ,1]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,2]) - mean(muestra)) ^ 2),
sum((mean(muestra[ ,3]) - mean(muestra)) ^ 2))
aux <- matrix(data = rep(0, 60),
nrow = nrow(muestra),
ncol = 3,
byrow = T)
for (grupo in 1:3) {
for (obs in 1:nrow(muestra)) {
aux[obs, grupo] <- (muestra[obs, grupo] - mean(muestra[ ,grupo])) ^ 2
}
}
S_within <- sum(aux)
F_observado <- (S_between * ncol(muestra) * (nrow(muestra) - 1)) /
((ncol(muestra) - 1) * S_within)
return(F_observado >= F_critico)
}
(proporcion_rechazos_h0 <- mean(replicate(10000,
rechazaHO(escenario1(mus = c(0, 0, 0),
J = 20)))))
escenario2 <- function (medias, J) {
grupos = cbind(medias[1] + runif(n = J, min = -3, max = 3),
medias[2] + runif(n = J, min = -3, max = 3),
medias[3] + runif(n = J, min = -3, max = 3))
return(grupos)
}
escenario3 <- function (medias, J) {
grupos = cbind(medias[1] + rt(n = J, df = 3),
medias[2] + rt(n = J, df = 3),
medias[3] + rt(n = J, df = 3))
return(grupos)
}
proporcion_rechazos_h0_error_normal <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario1(mus = medias,
J = J)))))
}
proporcion_rechazos_h0_error_unif <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario2(mus = medias,
J = J)))))
}
proporcion_rechazos_h0_error_t <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario3(mus = medias,
J = J)))))
}
seq(3, 30, by = 3)
for(n_obs in seq(3, 30, by = 3)) {
proporcion_rechazos_h0_error_normal(medias = c(0, 0, 0),
J = n_obs))
for(n_obs in seq(3, 30, by = 3)) {
proporcion_rechazos_h0_error_normal(medias = c(0, 0, 0),
J = n_obs)
}
proporcion_rechazos_h0_error_normal <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario1(mus = medias,
J = J)))))
}
proporcion_rechazos_h0_error_unif <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario2(mus = medias,
J = J)))))
}
proporcion_rechazos_h0_error_t <- function(medias, J) {
return(mean(replicate(10000, rechazaHO(escenario3(mus = medias,
J = J)))))
}
