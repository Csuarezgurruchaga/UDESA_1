simulacion_mv <- function(b = 1, n = 15, muestra = runif(n = n, min = 0, max = b)) {
estimador_b <- replicate(1000, b_2(muestra)) - b
return(c(mean(estimador_b) - b, var(estimador_b)))
}
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv <- function(b = 1, n = 15, muestra = runif(n = n, min = 0, max = b)) {
estimador_b <- replicate(1000, b_2(muestra)) - b
return(c(mean(estimador_b) - b, var(estimador_b)))
}
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv()
simulacion_mv()
muestra_2 <- c(0.917, 0.247, 0.384, 0.530, 0.798, 0.912, 0.096, 0.684, 0.394, 20.1, 0.769, 0.137, 0.352, 0.332, 0.670)
b_1(muestra_2)
b_2(muestra_2)
b_3(muestra_2)
hist(muestra_2)
hist(muestra_2, breaks=10)
hist(muestra_2, breaks=100)
hist(muestra_2, breaks=10000)
hist(muestra_2, breaks=1)
hist(muestra_2, breaks=2)
hist(muestra_2)
plot(muestra_2)
var(muestra_2)
median(c(1,2,3,4,5,6))
median(c(6,4,3,2,1,5))
median(c(1,2,3,4,5,6))
median(c(6,4,3,2,1,5))
sample(x = uniforme, size = 1, prob = 0.05)
uniforme <- runif(n = 15, min = 0, max = 1)
sample(x = uniforme, size = 1, prob = 0.05)
uniforme <- runif(n = 15, min = 0, max = 1)
sample(x = uniforme, size = 1, prob = 0.05)
sample(x = uniforme, size = 15, prob = 0.05)
uniforme
sample(x = uniforme, size = 1, prob = 0.05)
sample(x = uniforme, size = 1)
sample(x = uniforme, size = 1)
rbinom(n = 15, size = 1, prob = 0.05)
rbinom(n = 15, size = 1, prob = 0.05)
rbinom(n = 15, size = 1, prob = 0.05)
rbinom(n = 15, size = 1, prob = 0.05)
rbinom(n = 15, size = 1, prob = 0.05)
uniforme * rbinom(n = 15, size = 1, prob = 0.05)
uniforme * rbinom(n = 15, size = 1, prob = 0.05) * 100
uniforme * rbinom(n = 15, size = 1, prob = 0.05) * 100
uniforme * rbinom(n = 15, size = 1, prob = 0.05) * 100
uniforme * rbinom(n = 15, size = 1, prob = 0.05) * 100
uniforme * rbinom(n = 15, size = 1, prob = 0.05) * 100
uniforme * rbinom(n = 15, size = 1, prob = 0.05) * 100
uniforme * rbinom(n = 15, size = 1, prob = 0.05)
uniforme * rbinom(n = 15, size = 1, prob = 0.05)
rbinom(n = 1, size = 1, prob = 0.05)
rbinom(n = 1, size = 1, prob = 0.05)
rbinom(n = 1, size = 15, prob = 0.05)
rbinom(n = 1, size = 15, prob = 0.05)
rbinom(n = 1, size = 15, prob = 0.05)
rbinom(n = 1, size = 15, prob = 0.05)
rbinom(n = 1, size = 15, prob = 0.05)
rbinom(n = 1, size = 1, prob = 0.05)
rbinom(n = 1, size = 1, prob = 0.05)
rbinom(n = 1, size = 1, prob = 0.05)
uniforme <- runif(n = 15, min = 0, max = 1)
uniforme[1] <- uniforme[1] * 100
uniforme <- runif(n = 15, min = 0, max = 1)
uniforme[1] <- uniforme[1] * 100
uniforme
uniforme <- runif(n = 15, min = 0, max = 1)
uniforme <- runif(n = 15, min = 0, max = 1)
uniforme <- runif(n = 15, min = 0, max = 1)
uniforme
uniforme[1] <- uniforme[1] * 100
uniforme
uniforme <- runif(n = 15, min = 0, max = 1)
if (rbinom(n = 1, size = 1, prob = 0.05)) {
muestra_3 <- runif(n = 15, min = 0, max = 1)
muestra_3[1] <- uniforme[1] * 100
} else {
muestra_3 <- runif(n = 15, min = 0, max = 1)
}
b_1(muestra_3)
b_2(muestra_3)
b_3(muestra_3)
uniforme <- runif(n = 15, min = 0, max = 1)
if (rbinom(n = 1, size = 1, prob = 0.05)) {
muestra_3 <- runif(n = 15, min = 0, max = 1)
muestra_3[1] <- uniforme[1] * 100
} else {
muestra_3 <- runif(n = 15, min = 0, max = 1)
}
b_1(muestra_3)
b_2(muestra_3)
b_3(muestra_3)
uniforme <- runif(n = 15, min = 0, max = 1)
if (rbinom(n = 1, size = 1, prob = 0.05)) {
muestra_3 <- runif(n = 15, min = 0, max = 1)
muestra_3[1] <- uniforme[1] * 100
} else {
muestra_3 <- runif(n = 15, min = 0, max = 1)
}
b_1(muestra_3)
b_2(muestra_3)
b_3(muestra_3)
b_1(muestra_3)
load(faithful)
read.csv(faithful)
data <- read.csv("~/Descargas/faithful.csv")
muestra = data$eruptions
hist(muestra, col = "steelblue", main ="Faithful")
(mediana = median(muestra))
Nboot = 1000
n = length(muestra)
m_boot = rep(0, Nboot)
for (k in 1:Nboot){
muestra_boot =sample(muestra, replace = TRUE)
m_boot[k] = median( muestra_boot)
}
mean(m_boot)
sd(m_boot)
quantile(m_boot, c(0.1, 0.9))
data <- read.csv("~/Descargas/faithful.csv")
muestra = data$eruptions
hist(muestra, col = "steelblue", main ="Faithful")
(mediana = median(muestra))
Nboot = 1000
n = length(muestra)
m_boot = rep(0, Nboot)
for (k in 1:Nboot){
muestra_boot =sample(muestra, replace = TRUE)
m_boot[k] = median( muestra_boot)
}
mean(m_boot)
sd(m_boot)
quantile(m_boot, c(0.1, 0.9))
# ¿Como puedo estimar la probabilidad de que la mediana sea mayor a 60?
# ¿Cómo puedo estimar el sesgo de la mediana? y el ECM?
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
(mom_gamma = momentos(muestra))
(mle_gamma =EMV(muestra)
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
#####
muestral_emv = replicate(2000, EMV(rgamma(20,shape = 2, rate = 0.5)))
muestral_mom = replicate(2000, momentos(rgamma(20,shape = 2, rate = 0.5)))
hist(muestral_emv[1,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma alfa_hat")
hist(muestral_mom[1,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 2, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
hist(muestral_emv[2,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma lambda_hat")
hist(muestral_mom[2,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 0.5, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
##### BOOTSTRAP
Nboot = 1000
n = length(muestra)
mle_boot_par = matrix( rep(0, 2*Nboot), ncol = 2) #bootstrap parametrico
mom_boot_par = matrix( rep(0, 2*Nboot), ncol = 2)
mle_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)# bootstrap resampleo
mom_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)
for (k in 1:Nboot){
mle_boot_par[k,] = EMV(rgamma(n, shape = mle_gamma[1], rate = mle_gamma[2]))
mom_boot_par[k,] = momentos(rgamma(n, shape = mom_gamma[1], rate = mom_gamma[2]))
mle_boot_res[k,] = EMV(sample(muestra, replace = TRUE))
mom_boot_res[k,] = momentos(sample(muestra, replace = TRUE))
}
#hist(mle_boot_par[,2], col = rgb(0,0,1,1/4))
#hist(mom_boot_par[,2], col = rgb(1,0,0,1/4), add = T)
apply(mle_boot_par, 2, sd)
apply(mom_boot_par, 2, sd)
apply(mle_boot_res, 2, sd)
apply(mom_boot_res, 2, sd)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
(mom_gamma = momentos(muestra))
(mle_gamma =EMV(muestra))
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
#####
muestral_emv = replicate(2000, EMV(rgamma(20,shape = 2, rate = 0.5)))
muestral_mom = replicate(2000, momentos(rgamma(20,shape = 2, rate = 0.5)))
hist(muestral_emv[1,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma alfa_hat")
hist(muestral_mom[1,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 2, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
hist(muestral_emv[2,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma lambda_hat")
hist(muestral_mom[2,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 0.5, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
##### BOOTSTRAP
Nboot = 1000
n = length(muestra)
mle_boot_par = matrix( rep(0, 2*Nboot), ncol = 2) #bootstrap parametrico
mom_boot_par = matrix( rep(0, 2*Nboot), ncol = 2)
mle_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)# bootstrap resampleo
mom_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)
for (k in 1:Nboot){
mle_boot_par[k,] = EMV(rgamma(n, shape = mle_gamma[1], rate = mle_gamma[2]))
mom_boot_par[k,] = momentos(rgamma(n, shape = mom_gamma[1], rate = mom_gamma[2]))
mle_boot_res[k,] = EMV(sample(muestra, replace = TRUE))
mom_boot_res[k,] = momentos(sample(muestra, replace = TRUE))
}
#hist(mle_boot_par[,2], col = rgb(0,0,1,1/4))
#hist(mom_boot_par[,2], col = rgb(1,0,0,1/4), add = T)
apply(mle_boot_par, 2, sd)
apply(mom_boot_par, 2, sd)
apply(mle_boot_res, 2, sd)
apply(mom_boot_res, 2, sd)
(mom_gamma = momentos(muestra))
(mle_gamma =EMV(muestra))
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
#Si multiplico por -1, el minimo es el maximo.
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
# optim, en el parametro par, yo le pongo la semilla inicial desde donde empezar a buscar
# y me encuentra el maximo
# es importante que arranque cerca del maximo absoluto, porque se puede atascar en un
# minimo relativo, para eso se pasa un vector de puntos y se fija cual es el mayor.
# sino otra opcion es poner el valor de momento
(mom_gamma = momentos(muestra)) #estimador de momento
(mle_gamma =EMV(muestra)) # estimador de likelihood
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
#####
muestral_emv = replicate(2000, EMV(rgamma(20,shape = 2, rate = 0.5)))
muestral_mom = replicate(2000, momentos(rgamma(20,shape = 2, rate = 0.5)))
hist(muestral_emv[1,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma alfa_hat")
hist(muestral_mom[1,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 2, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
hist(muestral_emv[2,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma lambda_hat")
hist(muestral_mom[2,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 0.5, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
##### BOOTSTRAP
Nboot = 1000
n = length(muestra)
mle_boot_par = matrix( rep(0, 2*Nboot), ncol = 2) #bootstrap parametrico
mom_boot_par = matrix( rep(0, 2*Nboot), ncol = 2)
mle_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)# bootstrap resampleo
mom_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)
for (k in 1:Nboot){
mle_boot_par[k,] = EMV(rgamma(n, shape = mle_gamma[1], rate = mle_gamma[2]))
mom_boot_par[k,] = momentos(rgamma(n, shape = mom_gamma[1], rate = mom_gamma[2]))
mle_boot_res[k,] = EMV(sample(muestra, replace = TRUE))
mom_boot_res[k,] = momentos(sample(muestra, replace = TRUE))
}
#hist(mle_boot_par[,2], col = rgb(0,0,1,1/4))
#hist(mom_boot_par[,2], col = rgb(1,0,0,1/4), add = T)
apply(mle_boot_par, 2, sd)
apply(mom_boot_par, 2, sd)
apply(mle_boot_res, 2, sd)
apply(mom_boot_res, 2, sd)
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
#Si multiplico por -1, el minimo es el maximo.
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
# optim, en el parametro par, yo le pongo la semilla inicial desde donde empezar a buscar
# y me encuentra el maximo
# es importante que arranque cerca del maximo absoluto, porque se puede atascar en un
# minimo relativo, para eso se pasa un vector de puntos y se fija cual es el mayor.
# sino otra opcion es poner el valor de momento
(mom_gamma = momentos(muestra)) #estimador de momento
(mle_gamma =EMV(muestra)) # estimador de likelihood
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
#Si multiplico por -1, el minimo es el maximo.
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
# optim, en el parametro par, yo le pongo la semilla inicial desde donde empezar a buscar
# y me encuentra el maximo
# es importante que arranque cerca del maximo absoluto, porque se puede atascar en un
# minimo relativo, para eso se pasa un vector de puntos y se fija cual es el mayor.
# sino otra opcion es poner el valor de momento
(mom_gamma = momentos(muestra)) #estimador de momento
(mle_gamma =EMV(muestra)) # estimador de likelihood
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
muestra = data$V1
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
#Si multiplico por -1, el minimo es el maximo.
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
# optim, en el parametro par, yo le pongo la semilla inicial desde donde empezar a buscar
# y me encuentra el maximo
# es importante que arranque cerca del maximo absoluto, porque se puede atascar en un
# minimo relativo, para eso se pasa un vector de puntos y se fija cual es el mayor.
# sino otra opcion es poner el valor de momento
(mom_gamma = momentos(muestra)) #estimador de momento
(mle_gamma =EMV(muestra)) # estimador de likelihood
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
#####
muestral_emv = replicate(2000, EMV(rgamma(20,shape = 2, rate = 0.5)))
muestral_mom = replicate(2000, momentos(rgamma(20,shape = 2, rate = 0.5)))
hist(muestral_emv[1,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma alfa_hat")
hist(muestral_mom[1,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 2, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
hist(muestral_emv[2,], col = rgb(0,0,1,1/4), breaks = 20, main = "Histograma lambda_hat")
hist(muestral_mom[2,], col = rgb(1,0,0,1/4), add = T, breaks = 20)
abline( v = 0.5, col = "red", lty = 3)
legend("topright", fill = c(rgb(0,0,1,1/4), rgb(1,0,0,1/4)), legend = c("Emv", "Momentos"))
##### BOOTSTRAP
Nboot = 1000
n = length(muestra)
mle_boot_par = matrix( rep(0, 2*Nboot), ncol = 2) #bootstrap parametrico
mom_boot_par = matrix( rep(0, 2*Nboot), ncol = 2)
mle_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)# bootstrap resampleo
mom_boot_res = matrix( rep(0, 2*Nboot), ncol = 2)
for (k in 1:Nboot){
mle_boot_par[k,] = EMV(rgamma(n, shape = mle_gamma[1], rate = mle_gamma[2]))
mom_boot_par[k,] = momentos(rgamma(n, shape = mom_gamma[1], rate = mom_gamma[2]))
mle_boot_res[k,] = EMV(sample(muestra, replace = TRUE))
mom_boot_res[k,] = momentos(sample(muestra, replace = TRUE))
}
#hist(mle_boot_par[,2], col = rgb(0,0,1,1/4))
#hist(mom_boot_par[,2], col = rgb(1,0,0,1/4), add = T)
apply(mle_boot_par, 2, sd)
apply(mom_boot_par, 2, sd)
apply(mle_boot_res, 2, sd)
apply(mom_boot_res, 2, sd)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
#Si multiplico por -1, el minimo es el maximo.
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
# optim, en el parametro par, yo le pongo la semilla inicial desde donde empezar a buscar
# y me encuentra el maximo
# es importante que arranque cerca del maximo absoluto, porque se puede atascar en un
# minimo relativo, para eso se pasa un vector de puntos y se fija cual es el mayor.
# sino otra opcion es poner el valor de momento
(mom_gamma = momentos(muestra)) #estimador de momento
(mle_gamma =EMV(muestra)) # estimador de likelihood
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
muestra = data$V1
summary(muestra)
momentos = function(muestra){
lambda_hat = mean(muestra)/(mean(muestra^2) - mean(muestra)^2)
alfa_hat =  mean(muestra)^2/(mean(muestra^2) - mean(muestra)^2)
c(alfa_hat, lambda_hat)
}
mlog.likelihood = function(muestra, par){
alfa = par[1]
lambda = par[2]
-(sum( alfa*log(lambda) - log(gamma(alfa)) +(alfa -1)*log(muestra) - lambda*muestra))
#definimos menos el loglikelihood porque optim minimiza
#Si multiplico por -1, el minimo es el maximo.
}
mlog.likelihood(muestra, momentos(muestra))
EMV = function(muestra){ #optim necesita un punto inicial. Usamos el estimador de momentos
optim(par = momentos(muestra), mlog.likelihood, muestra = muestra)$par
}
# optim, en el parametro par, yo le pongo la semilla inicial desde donde empezar a buscar
# y me encuentra el maximo
# es importante que arranque cerca del maximo absoluto, porque se puede atascar en un
# minimo relativo, para eso se pasa un vector de puntos y se fija cual es el mayor.
# sino otra opcion es poner el valor de momento
(mom_gamma = momentos(muestra)) #estimador de momento
(mle_gamma =EMV(muestra)) # estimador de likelihood
hist(muestra, breaks = 20, col = "steelblue", freq = FALSE)
curve(dgamma(x, shape = mom_gamma[1], rate = mom_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "red", lwd = 2)
curve(dgamma(x, shape = mle_gamma[1], rate = mle_gamma[2]),
min(muestra), max(muestra), add = TRUE, col = "orange", lwd = 2, lty = 3)
data <- read.table("~/Descargas/gamma-arrivals.csv", quote="\"", comment.char="")
data <- read.table("gamma-arrivals.csv", quote="\"", comment.char="")
data <- read.table("gamma_arrivals.csv", quote="\"", comment.char="")
```{r}
```{r}
