return(vector_angulos)
}
graficame <- function(vector, main, ylabel) {
plot(vector ~ c(2, 3, 4, 5, 10, 20, 30, 100),
main = main,
ylim = c(min(vector), max(vector)),
ylab = ylabel,
xlab = "CANTIDAD DE VARIABLES ALEATORIAS",
col = "blue",
type = "b",
pch = 4,
lwd = 3,
axes = F)
box(col = "blue") # Agrego la caja
# Añadir eje X
axis(1,
at = c(3, 4, 5, 10, 20, 30, 100),
col = "blue",        # Color línea ejes
col.ticks = "green", # Color marcas ejes
col.axis = "red")    # Color de las etiquetas
# Añadir eje Y
axis(2,
col = "blue",
col.ticks = "green",
col.axis = "red",
las = 2)
}
# ----------------------funciones----------------------
# ----------------------funciones----------------------
for (k in c(2, 3, 4, 5, 10, 20, 30, 100)) {
vector_angulos <- apply(as.matrix(k), 1, dame_tita)
vector_titas[j] <- mean(vector_angulos) # Obtengo la estimacion de la esperanza
vector_varianza_tita[j] <- var(vector_angulos) # Obtengo la varianza
hist(x = vector_angulos, main = k, col = "violet",
xlab = "VALORES DE THETA",
ylab = "FRECUENCIA") # Realizo un histograma de la distribucion de tita
print(paste0("La esperanza estimada de tita para n = ", k, " variables aleatorias es de: ", round(vector_titas[j], digits = 3)))
j <- j + 1
}
graficame(vector_titas,
main = "ESPERANZA DE THETA EN FUNCION DE 'n'",
ylabel = "VALOR DE THETA EN RADIANES")
vector_angulos <- c() # vector auxiliar donde se guardan los titas para hacer luego el promedio
vector_titas <- c() # vector de estimaciones de esperanzas
vector_varianza_tita <- c() # vector donde guardo la varianza de los titas
j <- 1 # contador
# ----------------------funciones----------------------
# ----------------------funciones----------------------
dame_norma <- function(matriz) {
return(norm(x = as.matrix(matriz), type = "f"))
}
dame_tita <- function(n_var_al, veces = 10000) {
c <- 1 # contador
for (vez in 1:veces) {
matriz_vect_al <- matrix(data = rnorm(n = 2 * n_var_al, mean = 0, sd = 1),
nrow = n_var_al,
ncol = 2,
byrow = F)
producto_escalar <- sum(apply(matriz_vect_al, 1, prod))
norma <- prod(apply(matriz_vect_al, 2, FUN = dame_norma))
vector_angulos[c] <- acos(producto_escalar / prod(norma))
c <- c + 1
}
return(vector_angulos)
}
graficame <- function(vector, main, ylabel) {
plot(vector ~ c(2, 3, 4, 5, 10, 20, 30, 100),
main = main,
ylim = c(min(vector), max(vector)),
ylab = ylabel,
xlab = "CANTIDAD DE VARIABLES ALEATORIAS",
col = "blue",
type = "b",
pch = 4,
lwd = 3,
axes = F)
box(col = "blue") # Agrego la caja
# Añadir eje X
axis(1,
at = c(3, 4, 5, 10, 20, 30, 100),
col = "blue",        # Color línea ejes
col.ticks = "green", # Color marcas ejes
col.axis = "red")    # Color de las etiquetas
# Añadir eje Y
axis(2,
col = "blue",
col.ticks = "green",
col.axis = "red",
las = 2)
}
# ----------------------funciones----------------------
# ----------------------funciones----------------------
for (k in c(2, 3, 4, 5, 10, 20, 30, 100)) {
vector_angulos <- apply(as.matrix(k), 1, dame_tita)
vector_titas[j] <- mean(vector_angulos) # Obtengo la estimacion de la esperanza
vector_varianza_tita[j] <- var(vector_angulos) # Obtengo la varianza
hist(x = vector_angulos, main = k, col = "blue",
xlab = "VALORES DE THETA",
ylab = "FRECUENCIA")
print(paste0("La esperanza estimada de tita para n = ", k, " variables aleatorias es de: ", round(vector_titas[j], digits = 3)))
j <- j + 1
}
graficame(vector_titas,
main = "ESPERANZA DE THETA EN FUNCION DE 'n'",
ylabel = "VALOR DE THETA EN RADIANES")
z<-0
tau<-0
to_plot<-vector()
while(z>= -10  && z<=10){
tau<-tau+1
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {  z<-z+1 }
if(coin == 0) {  z<-z-1 }
to_plot[tau]=c(z)
}
plot((1:tau),to_plot, main = "Distribucion tau", xlab = "tau", ylab = "CARA O SECA")
hist(tau)
hist(1:tau)
knitr::opts_chunk$set(echo = TRUE)
Poblacion = c(1)
Poblacion_record = c()
P = 80
tiempo = seq(1:1000)
For (t in tiempo){
tiempo <- seq(1:10)
p <- 0.5
for (t in tiempo) {
print(rbinom(1, 1, p))
}
tiempo <- seq(1:10)
p <- 0.5
n_miembros <- 1
for (t in tiempo) {
if (rbinom(1, 1, p)) {
n_miembros <- n_miembros + 1
}
}
tiempo <- seq(1:10)
p <- 0.5
n_miembros <- 1
for (t in tiempo) {
if (rbinom(1, 1, p)) {
n_miembros <- n_miembros + 1
}
}
n_miembros
tiempo <- seq(1:10)
p <- 0.3
n_miembros <- 1
for (t in tiempo) {
if (rbinom(1, 1, p)) {
n_miembros <- n_miembros + 1
}
}
n_miembros
tiempo <- seq(1:10)
p <- 0.3
n_miembros <- 1
for (t in tiempo) {
if (rbinom(1, 1, p)) {
n_miembros <- n_miembros + 1
}
}
n_miembros
tiempo <- seq(1:10)
p <- 0.3
n_miembros <- 1
for (t in tiempo) {
if (rbinom(1, 1, p)) {
n_miembros <- n_miembros + 1
}
}
n_miembros
tiempo <- seq(1:10)
p <- 0.3
n_miembros <- 1
for (t in tiempo) {
if (rbinom(1, 1, p)) {
n_miembros <- n_miembros + 1
}
}
n_miembros
rbinom(n = 1, size = tiempo, prob = p))
rbinom(n = 1, size = tiempo, prob = p)
rbinom(n = 10, size = tiempo, prob = p)
rbinom(n = 10, size = 1, prob = p)
rbinom(n = 10, size = 1, prob = p)
rbinom(n = 10, size = 1, prob = p)
rbinom(n = 10, size = 1, prob = p)
p <- 0.5
rbinom(n = 10, size = 1, prob = p)
rbinom(n = 10, size = 1, prob = p)
rbinom(n = tiempo, size = 1, prob = p)
tiempo <- 9
p <- 0.5
n_miembros <- 1
rbinom(n = tiempo, size = 1, prob = p)
n_miembros <- n_miembros + 1
n_miembros
rbinom(n = tiempo, size = 1, prob = p)
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
t <- 9
p <- 0.5
n_miembros <- 1
while(t != 0) {
if (rbinom(n = 1, size = 1, prob = p)) {
n_miembros <- n_miembros + 2
}
t <- t - 1
}
n_miembros
rbinom(n = 1, size = 1, prob = p)
rbinom(n = 1, size = 1, prob = p)
tiempo <- 9
t <- 1
p <- 0.5
n_miembros <- 1
for (k in n_evaluaciones) {
condicion <- rbinom(n = 1, size = 1, prob = p)
if (condicion) {
k + 2
}
}
Poblacion = c(1)
Poblacion_record = c()
P = 80
tiempo = seq(1:1000)
for (t in tiempo){
Probas = runif(
length(Poblacion),
0,
100
)
Poblacion = Poblacion * Probas
#los que tengan valores menores a 80 van a estar vivos
Survivors  = Poblacion < p
#seteamos como 1 a todos los supervivientes (para dsps volver a repetir lo de arriba)
Poblacion[Survivors] = 1
#seteamos a 0 los muertos, el setearlos a 0 hace que en las próximas iteraciones, esos elementos del vector sigan siendo sí o sí 0
Poblacion[No Survivors] = 0
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 0, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0){
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t){
return((2 * 0.8) ^ t)
}
plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
points(x = seq(1:3), y = seq(7998:8000))
poblacion_total
poblacion
probas
lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red')
plot(seq(1:100), crecimiento_conocido(seq(1:100)))
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 0, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0){
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t){
return((2 * 0.8) ^ t)
}
plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
points(x = seq(1:3), y = seq(7998:8000))
plot(seq(1:100), crecimiento_conocido(seq(1:100)))
lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red')
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 0, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0){
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t){
return((2 * 0.8) ^ t)
}
plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
points(x = seq(1:3), y = seq(7998:8000))
plot(seq(1:100), crecimiento_conocido(seq(1:100)))
lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red'))
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 0, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0){
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t){
return((2 * 0.8) ^ t)
}
plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
points(x = seq(1:3), y = seq(7998:8000))
plot(seq(1:100), crecimiento_conocido(seq(1:100)))
# lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red'))
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 0, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0){
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t){
return((2 * 0.8) ^ t)
}
plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
points(x = seq(1:3), y = seq(7998:8000))
plot(seq(1:100), crecimiento_conocido(seq(1:100)))
# lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red'))
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 1, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p & poblacion != 0
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0){
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t){
return((2 * 0.8) ^ t)
}
plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
# lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red'))
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 1, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p & poblacion != 0
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0) {
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t) {
return((2 * 0.8) ^ t)
}
# plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
# plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
# lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red'))
#pRUEBA 8 -------------------------------
poblacion = c(1)
poblacion_total = c()
casos_p = 80/100
tiempo = seq(1:10)
for (t in tiempo){
probas = runif(length(poblacion), 1, 100) / 100
poblacion = probas * poblacion
sobrevivientes = poblacion < casos_p & poblacion != 0
poblacion[sobrevivientes] = 1
poblacion[!sobrevivientes] = 0
if (sum(poblacion) == 0) {
break
} else {
poblacion = append(poblacion, rep(1, times = sum(sobrevivientes) * 2))
}
poblacion_total[t] = sum(poblacion)
print(length(poblacion))
}
crecimiento_conocido = function(t) {
return((2 * 0.8) ^ t)
}
# plot(seq(1:length(poblacion_total)), poblacion_total, type = "l")
# plot(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total))), type = "l")
# lines(seq(1:length(poblacion_total)), crecimiento_conocido(seq(1:length(poblacion_total)), type = "b", col = 'red'))
